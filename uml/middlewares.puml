@startuml
SystemConfigSubscriber <|-- DatabasePool

DatabasePool : getConnectionOptions;
DatabasePool : getWhiteListConnectionNames;
DatabasePool : instance;

DatabasePool : getInstance();
DatabasePool : initClientPool();
DatabasePool : syncClientPool();
DatabasePool : startDatabase();
DatabasePool : isConnectionNameExist();
DatabasePool : stopDatabase();
DatabasePool : closeConnection();

SystemConfigSubscriber <|-- EsPool

EsPool : esKey;
EsPool : unifyEs;
EsPool : instance;

EsPool : getInstance();
EsPool : initClientPool();
EsPool : syncClientPool();
EsPool : getEsClient();
EsPool : getEsIndex();
EsPool : createClient();
EsPool : releaseClients();

EtcdClient : instance;
EtcdClient : loggerExtraOptions;

EtcdClient : getInstance();
EtcdClient : watchPrefixPut();
EtcdClient : getAllByPrefix();
EtcdClient : put();
EtcdClient : close();
EtcdClient : getClient();

SystemConfigSubscriber <|-- EtcdPool

EtcdPool : etcdKey;
EtcdPool : unifyClient;
EtcdPool : instance;

EtcdPool : getInstance();
EtcdPool : getEventDataByHander();
EtcdPool : handleEvent();
EtcdPool : initClientPool();
EtcdPool : syncClientPool();
EtcdPool : initEtcdClients();
EtcdPool : addEtcdClients();
EtcdPool : relaseClients();
EtcdPool : getClient();

GrpcClient : grpcClientPool;
GrpcClient : grpcImp;
GrpcClient : etcdClient;
GrpcClient : defaultAddress;
GrpcClient : etcdPrefix;
GrpcClient : loggerExtraOptions;
GrpcClient : watcher;
GrpcClient : creatingClientLock;

GrpcClient : getResBody();
GrpcClient : getInstance();
GrpcClient : init();
GrpcClient : getClient();
GrpcClient : close();
GrpcClient : getGrpcServerAddress();
GrpcClient : getGrpcAddress();
GrpcClient : watchPrefixPut();
GrpcClient : getGrpcServiceCaller();

SystemConfigSubscriber <|-- GrpcPool

GrpcPool : etcdPool;
GrpcPool : unifyGrpcClientPool;
GrpcPool : getGrpcDepEtcdUuid;
GrpcPool : grpcDepEtcdUUids;
GrpcPool : getDefaultEtcdPrefix;
GrpcPool : getGrpcImpl;
GrpcPool : getDefaultAddress;
GrpcPool : instance;

GrpcPool : getInstance();
GrpcPool : getClient();
GrpcPool : initClientPool();
GrpcPool : syncClientPool();
GrpcPool : addBiz();
GrpcPool : createGrpcClient();
GrpcPool : initGrpcClients();

Cluster <|-- RedisClient

RedisClient : loggerExtraOptions;
RedisClient : robot;

RedisClient : getInstance();
RedisClient : close();
RedisClient : safeOperation();
RedisClient : publishMessageToChannel();
RedisClient : subscribeChannel();
RedisClient : unsubscribeChannel();
RedisClient : unsubscribeAllChannel();
RedisClient : robotSend();

SystemConfigSubscriber <|-- RedisPool

RedisPool : redisKey;
RedisPool : enableRedLock;
RedisPool : unifyRedis;
RedisPool : instance;

RedisPool : getInstance();
RedisPool : initClientPool();
RedisPool : syncClientPool();
RedisPool : closeClients();
RedisPool : initRedis();
RedisPool : getRedisClient();
RedisPool : testRedisConfigValid();

Publisher <|-- SystemConfigPublisher



SystemConfigPublisher : publishEvent();

Subscriber <|-- SystemConfigSubscriber

SystemConfigSubscriber : robot;

SystemConfigSubscriber : getEventData();
SystemConfigSubscriber : handleEvent();
SystemConfigSubscriber : initClientPool();
SystemConfigSubscriber : syncClientPool();
SystemConfigSubscriber : robotSend();

GrpcClientPool : addressToClientMap;
GrpcClientPool : clientToAddressMap;
GrpcClientPool : lruCacheQueue;
GrpcClientPool : maxSize;

GrpcClientPool : remove();
GrpcClientPool : update();
GrpcClientPool : checkOverflow();
GrpcClientPool : add();
GrpcClientPool : delete();
GrpcClientPool : clear();

CryptHelper : algorithm;
CryptHelper : key;
CryptHelper : iv;
CryptHelper : encrypt;
CryptHelper : decrypt;



AbstractGrpcImp <|-- default

default : getGrpcAddressInfo;
default : getGrpcAddressByEtcd;

default : getGrpcEnv();
EtcdNode : id;
EtcdNode : address;

EtcdValue : name;
EtcdValue : version;
EtcdValue : nodes;


default : defaultGrpcOptions;

default : getGrpcAddressInfo();
default : getGrpcAddressByEtcd();
default : getGrpcClient();

AbstractGrpcImp <|-- RiskAdminImplementor



RiskAdminImplementor : getGrpcAddressInfo();
RiskAdminImplementor : getGrpcAddressByEtcd();

RiskAdmin : riskAdminService();

AbstractGrpcImp <|-- RiskAdminImplementor



RiskAdminImplementor : getGrpcAddressInfo();
RiskAdminImplementor : getGrpcAddressByEtcd();

RiskAdmin : riskAdminService();



EventBus : emit();
EventBus : addEventListener();
EventBus : removeEventListener();
EventBus : clear();

EventBus <|-- Publisher

Publisher : name;

Publisher : publish();

EventBus <|-- Subscriber

Subscriber : event;
Subscriber : name;
Subscriber : singleton;
Subscriber : handleTimeout;
Subscriber : handleTimeoutMsg;

Subscriber : subscribe();
Subscriber : handleEvent();

@enduml